type AreaOfStudy {
    title: String
    subfields: [Subfield] @relation(name: "SUBFIELD_OF", direction: IN)
}

type Subfield {
    title: String!
    topics: [Topic] @relation(name: "TOPIC_OF", direction: IN)
}

type Topic {
    # topicId: ID!
    title: String!
    sections: [Section] @relation(name: "SECTION_OF", direction: IN)
}

type Section {
    # sectionId: ID!
    title: String!
    definitions: [Definition] @relation(name: "DEFINITION_OF", direction: IN)
    theorems: [Theorem] @relation(name: "THEOREM_OF", direction: IN)
}

type Definition {
    # definitionId: ID!
    title: String!
    content: String
    definitionsUsed: [Definition] @relation(name: "USED_BY", direction: IN)
}

type Proof {
    # proofId: ID!
    title: String!
    content: String
    definitionsUsed: [Definition]
    theoremsUsed: [Theorem]
}

type Theorem {
    # theoremId: ID!
    title: String!
    proof: String!
    definitionsUsed: [Definition]
    knowledgeUsed: [ID!]
}

type Proposition {
    # theoremId: ID!
    title: String!
    proof: String!
    definitionsUsed: [Definition]
    theoremsUsed: [ID!]
}

type Exercise {
    # theoremId: ID!
    title: String!
    content: String
    definitionsUsed: [Definition]
    suggestedKnowledge: [Theorem]
}
type User {
    # userId: ID!
    name: String!
    completedExercises: [Exercise]
}

type Knowledge {
    definitions: [Definition]
    theorems: [Theorem]
}


type Mutation {
    createDefinition(sec_id: ID!, title: String!, content: String, definitionsUsed: [ID!]) : Definition 
    @isAuthenticated
    @cypher(statement: """
    MATCH (s) WHERE id(s) = toInteger($sec_id)
    CREATE (s) <- [:DEFINITION_OF] - (x :Definition {title: $title, content: $content})  
    WITH x, $definitionsUsed as ids 
    UNWIND ids as i  
    MATCH (d) WHERE id(d) = toInteger(i)
    CREATE (x) <- [:USED_BY] - (d) 
    RETURN x
    """)

    deleteDefinition(def_id: ID!) : Definition 
    @cypher(
        statement: 
        """
        MATCH (d: Definition) where id(d) = toInteger($def_id)
        DETACH DELETE d
        """
    )

    createTheorem(sec_id: ID!, title: String!, proof: String, knowledgeUsed: [ID!]) : Theorem @cypher(statement: """
    MATCH (s) WHERE id(s) = toInteger($sec_id)
    CREATE (s) <- [:THEOREM_OF] - (x :Theorem {title: $title, proof: $proof})  
    WITH x, $knowledgeUsed as ids 
    UNWIND ids as i  
    MATCH (d) WHERE id(d) = toInteger(i)
    CREATE (x) <- [:USED_BY] - (d) 
    RETURN x
    """)
}